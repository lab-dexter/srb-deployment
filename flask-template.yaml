apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: flask-template2
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: flask-app
    name: flask-app
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: flask-app:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        uri: https://github.com/KipsasJaujoj/flask-app.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: python:3.6
          namespace: openshift
      type: Source
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: Xq7dlFEIxS1NHLdyaOJs
      type: GitHub
    - generic:
        secret: UrqLzK-a-sBy7kZdhOEu
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      openshift.io/image.dockerRepositoryCheck: 2018-09-12T06:47:46Z
    creationTimestamp: null
    generation: 2
    labels:
      app: flask-app
    name: flask-app
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: docker-registry.default.svc:5000/dexter-lab/flask-app:latest
      generation: 2
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: flask-app
    name: flask-app
  spec:
    host: flask-app-dexter-lab.e4ff.pro-eu-west-1.openshiftapps.com
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: flask-app
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2018-09-12T06:47:46Z
        status: "True"
        type: Admitted
      host: flask-app-dexter-lab.e4ff.pro-eu-west-1.openshiftapps.com
      routerCanonicalHostname: elb.e4ff.pro-eu-west-1.openshiftapps.com
      routerName: router
      wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: flask-app
    name: flask-app
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: flask-app
      deploymentconfig: flask-app
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    generation: 1
    labels:
      app: flask-app
    name: flask-app
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: flask-app
      deploymentconfig: flask-app
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: flask-app
          deploymentconfig: flask-app
      spec:
        containers:
        - image: docker-registry.default.svc:5000/dexter-lab/flask-app@sha256:1fc66c323641cb5bd76bfda91f3e3feacc118e1db21b14a6e1f98afbd5462c6e
          imagePullPolicy: Always
          name: flask-app
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - flask-app
        from:
          kind: ImageStreamTag
          name: flask-app:latest
          namespace: dexter-lab
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
